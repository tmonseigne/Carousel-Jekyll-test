/*!
 * Metro UI 4 Jekyll v2.0.32 (http://a-g-f.github.com/metro-ui-jekyll/)
 * A port of Metro UI CSS made for Jekyll maintained by Alfred G. Fischer
 * Metro UI CSS Copyright 2012-2015 Sergey Pimenov
 * Metro UI 4 Jekyll Copyright 2014-2015 Alfred G. Fischer
 * Both licensed under http://opensource.org/licenses/MIT
 */

function addTouchEvents(a) {
    hasTouch && (a.addEventListener("touchstart", touch2Mouse, !0), a.addEventListener("touchmove", touch2Mouse, !0), a.addEventListener("touchend", touch2Mouse, !0))
}

function touch2Mouse(a) {
    var b, c = a.changedTouches[0];
    switch (a.type) {
        case "touchstart":
            b = "mousedown";
            break;
        case "touchend":
            b = "mouseup";
            break;
        case "touchmove":
            b = "mousemove";
            break;
        default:
            return
    }
    "mousedown" == b && (eventTimer = (new Date).getTime(), startX = c.clientX, startY = c.clientY, mouseDown = !0), "mouseup" == b && ((new Date).getTime() - eventTimer <= 500 ? b = "click" : (new Date).getTime() - eventTimer > 1e3 && (b = "longclick"), eventTimer = 0, mouseDown = !1), "mousemove" == b && mouseDown && (deltaX = c.clientX - startX, deltaY = c.clientY - startY, moveDirection = deltaX > deltaY ? "horizontal" : "vertical");
    var d = document.createEvent("MouseEvent");
    d.initMouseEvent(b, !0, !0, window, 1, c.screenX, c.screenY, c.clientX, c.clientY, !1, !1, !1, !1, 0, null), c.target.dispatchEvent(d), a.preventDefault()
}
if ("undefined" == typeof jQuery) throw new Error("Metro UI 4 Jekyll requires jQuery");
var METRO_AUTO_REINIT, METRO_LOCALE, METRO_WEEK_START, METRO_DIALOG = !1;
! function (a) {
    a.Metro = function (b) {
        b = a.extend({}, b)
    }, a.Metro.getDeviceSize = function () {
        var a = window.innerWidth > 0 ? window.innerWidth : screen.width,
            b = window.innerHeight > 0 ? window.innerHeight : screen.height;
        return {
            width: a,
            height: b
        }
    }
}(jQuery), $(function () {
        $("html").on("click", function () {
            $(".dropdown-menu").each(function (a, b) {
                $(b).hasClass("keep-open") || "block" != $(b).css("display") || $(b).hide()
            })
        })
    }), $(function () {
        $(window).on("resize", function () {
            if (METRO_DIALOG) {
                var a = ($(window).height() - METRO_DIALOG.outerHeight()) / 2,
                    b = ($(window).width() - METRO_DIALOG.outerWidth()) / 2;
                METRO_DIALOG.css({
                    top: a,
                    left: b
                })
            }
        })
    }),
    function (a) {
        a.Metro.currentLocale = "en", a.Metro.currentLocale = void 0 != METRO_LOCALE ? METRO_LOCALE : "en", a.Metro.Locale = {
            en: {
                months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
                days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
                buttons: ["Today", "Clear", "Cancel", "Help", "Prior", "Next", "Finish"]
            },
            fr: {
                months: ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre", "Jan", "Fév", "Mars", "Avr", "Mai", "Juin", "Juil", "Août", "Sept", "Oct", "Nov", "Déc"],
                days: ["Dimanche", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Di", "Lu", "Ma", "Me", "Je", "Ve", "Sa"],
                buttons: ["Aujourd'hui", "Effacer", "Annuler", "Aide", "Précedent", "Suivant", "Fin"]
            },
            nl: {
                months: ["Januari", "Februari", "Maart", "April", "Mei", "Juni", "Juli", "Augustus", "September", "Oktober", "November", "December", "Jan", "Feb", "Mrt", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec"],
                days: ["Zondag", "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrijdag", "Zaterdag", "Zo", "Ma", "Di", "Wo", "Do", "Vr", "Za"],
                buttons: ["Vandaag", "Verwijderen", "Annuleren", "Hulp", "Vorige", "Volgende", "Einde"]
            },
            ua: {
                months: ["Січень", "Лютий", "Березень", "Квітень", "Травень", "Червень", "Липень", "Серпень", "Вересень", "Жовтень", "Листопад", "Грудень", "Січ", "Лют", "Бер", "Кві", "Тра", "Чер", "Лип", "Сер", "Вер", "Жов", "Лис", "Гру"],
                days: ["Неділя", "Понеділок", "Вівторок", "Середа", "Четвер", "П’ятниця", "Субота", "Нд", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
                buttons: ["Сьогодні", "Очистити", "Скасувати", "Допомога", "Назад", "Вперед", "Готово"]
            },
            ru: {
                months: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь", "Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"],
                days: ["Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота", "Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
                buttons: ["Сегодня", "Очистить", "Отменить", "Помощь", "Назад", "Вперед", "Готово"]
            },
            zhCN: {
                months: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", "一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
                days: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六", "日", "一", "二", "三", "四", "五", "六"],
                buttons: ["今日", "清除", "Cancel", "Help", "Prior", "Next", "Finish"]
            },
            it: {
                months: ["Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre", "Gen", " Feb", "Mar", "Apr", "Mag", "Giu", "Lug", "Ago", "Set", "Ott", "Nov", "Dic"],
                days: ["Lunedì", "Martedì", "Mercoledì", "Giovedì", "Venerdì", "Sabato", "Domenica", "Lun", "Mar", "Mer", "Gio", "Ven", "Sab", "Dom"],
                buttons: ["Oggi", "Cancella", "Cancel", "Help", "Prior", "Next", "Finish"]
            },
            de: {
                months: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", "Jan", "Feb", "Mrz", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"],
                days: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag", "So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
                buttons: ["Heute", "Zurücksetzen", "Abbrechen", "Hilfe", "Früher", "Später", "Fertig"]
            },
            es: {
                months: ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre", "Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sept", "Oct", "Nov", "Dic"],
                days: ["Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado", "Do", "Lu", "Mar", "Mié", "Jue", "Vi", "Sáb"],
                buttons: ["Hoy", "Limpiar", "Cancel", "Help", "Prior", "Next", "Finish"]
            },
            pt: {
                months: ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro", "Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"],
                days: ["Domingo", "Segunda-feira", "Terça-feira", "Quarta-feira", "Quinta-feira", "Sexta-feira", "Sabado", "Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sab"],
                buttons: ["Hoje", "Limpar", "Cancelar", "Ajuda", "Anterior", "Seguinte", "Terminar"]
            },
            pl: {
                months: ["Styczeń", "Luty", "Marzec", "Kwiecień", "Maj", "Czerwiec", "Lipiec", "Sierpień", "Wrzesień", "Październik", "Listopad", "Grudzień", "Sty", "Lut", "Mar", "Kwi", "Maj", "Cze", "Lip", "Sie", "Wrz", "Paź", "Lis", "Gru"],
                days: ["Niedziela", "Poniedziałek", "Wtorek", "Środa", "Czwartek", "Piątek", "Sobota", "Nd", "Pon", "Wt", "Śr", "Czw", "Pt", "Sob"],
                buttons: ["Dzisiaj", "Wyczyść", "Anuluj", "Pomoc", "Poprzedni", "Następny", "Koniec"]
            },
            cs: {
                months: ["Leden", "Únor", "Březen", "Duben", "Květen", "Červen", "Červenec", "Srpen", "Září", "Říjen", "Listopad", "Prosinec", "Led", "Ún", "Bř", "Dub", "Kvě", "Če", "Čer", "Srp", "Zá", "Ří", "Li", "Pro"],
                days: ["Neděle", "Pondělí", "Úterý", "Středa", "Čtvrtek", "Pátek", "Sobota", "Ne", "Po", "Út", "St", "Čt", "Pá", "So"],
                buttons: ["Dnes", "Vyčistit", "Zrušit", "Pomoc", "Předešlý", "Další", "Dokončit"]
            }
        }, a.Metro.setLocale = function (b, c) {
            a.Metro.Locale[b] = c
        }
    }(jQuery);
var hasTouch = "ontouchend" in window,
    eventTimer, moveDirection = "undefined",
    startX, startY, deltaX, deltaY, mouseDown = !1;
! function (a) {
    a.widget("metro.accordion", {
        version: "1.0.1",
        options: {
            closeAny: !0,
            open: function () {},
            action: function () {}
        },
        _frames: {},
        _create: function () {
            var a = this.element;
            void 0 != a.data("closeany") && (this.options.closeAny = a.data("closeany")), this.init()
        },
        init: function () {
            var b = this;
            b.element.on("click", ".accordion-frame > .heading", function (c) {
                if (c.preventDefault(), c.stopPropagation(), !a(this).attr("disabled") && "none" != a(this).data("action")) {
                    b.options.closeAny && b._closeFrames();
                    var d = a(this).parent(),
                        e = d.children(".content");
                    console.log(this), a(e).is(":hidden") ? (a(e).slideDown(), a(this).removeClass("collapsed"), b._trigger("frame", c, {
                        frame: d
                    }), b.options.open(d)) : (a(e).slideUp(), a(this).addClass("collapsed")), b.options.action(d)
                }
            });
            var c = this.element.children(".accordion-frame");
            c.each(function () {
                var b = this,
                    c = a(this).children(".heading"),
                    d = a(this).children(".content");
                a(b).hasClass("active") && !a(b).attr("disabled") && "none" != a(b).data("action") ? (a(d).show(), a(c).removeClass("collapsed")) : a(c).addClass("collapsed")
            })
        },
        _closeFrames: function () {
            var b = this.element.children(".accordion-frame");
            a.each(b, function () {
                var b = a(this);
                b.children(".heading").addClass("collapsed"), b.children(".content").slideUp()
            })
        },
        _destroy: function () {},
        _setOption: function (a, b) {
            this._super("_setOption", a, b)
        }
    })
}(jQuery),
function (a) {
    a.widget("metro.buttonset", {
        version: "1.0.0",
        options: {
            click: function () {}
        },
        _buttons: {},
        _create: function () {
            var a = this.element;
            this._buttons = a.find("button, .button"), this.init()
        },
        init: function () {
            var b = this;
            this._buttons.each(function () {
                var c = a(this);
                c.on("click", function (a) {
                    a.preventDefault(), c.toggleClass("active"), b.options.click(c, c.hasClass("active")), b._trigger("click", null, {
                        button: c,
                        on: c.hasClass("active")
                    })
                })
            })
        },
        _destroy: function () {},
        _setOption: function (a, b) {
            this._super("_setOption", a, b)
        }
    })
}(jQuery),
function (a) {
    a.widget("metro.buttongroup", {
        version: "1.0.0",
        options: {
            click: function () {}
        },
        _buttons: {},
        _create: function () {
            var a = this.element;
            this._buttons = a.find("button, .button"), this.init()
        },
        init: function () {
            var b = this;
            this._buttons.each(function () {
                var c = a(this);
                c.on("click", function (a) {
                    a.preventDefault(), b._buttons.removeClass("active"), c.addClass("active"), b.options.click(c, c.hasClass("active")), b._trigger("click", null, {
                        button: c,
                        on: c.hasClass("active")
                    })
                })
            })
        },
        _destroy: function () {},
        _setOption: function (a, b) {
            this._super("_setOption", a, b)
        }
    })
}(jQuery);
var dateFormat = function () {
    var a = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
        b = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
        c = /[^-+\dA-Z]/g,
        d = function (a, b) {
            for (a = String(a), b = b || 2; a.length < b;) a = "0" + a;
            return a
        };
    return function (e, f, g) {
        var h = dateFormat;
        1 != arguments.length || "[object String]" != Object.prototype.toString.call(e) || /\d/.test(e) || (f = e, e = void 0), e = e ? new Date(e) : new Date, f = String(h.masks[f] || f || h.masks["default"]), "UTC:" == f.slice(0, 4) && (f = f.slice(4), g = !0), locale = $.Metro.currentLocale;
        var i = g ? "getUTC" : "get",
            j = e[i + "Date"](),
            k = e[i + "Day"](),
            l = e[i + "Month"](),
            m = e[i + "FullYear"](),
            n = e[i + "Hours"](),
            o = e[i + "Minutes"](),
            p = e[i + "Seconds"](),
            q = e[i + "Milliseconds"](),
            r = g ? 0 : e.getTimezoneOffset(),
            s = {
                d: j,
                dd: d(j),
                ddd: $.Metro.Locale[locale].days[k],
                dddd: $.Metro.Locale[locale].days[k + 7],
                m: l + 1,
                mm: d(l + 1),
                mmm: $.Metro.Locale[locale].months[l],
                mmmm: $.Metro.Locale[locale].months[l + 12],
                yy: String(m).slice(2),
                yyyy: m,
                h: n % 12 || 12,
                hh: d(n % 12 || 12),
                H: n,
                HH: d(n),
                M: o,
                MM: d(o),
                s: p,
                ss: d(p),
                l: d(q, 3),
                L: d(q > 99 ? Math.round(q / 10) : q),
                t: 12 > n ? "a" : "p",
                tt: 12 > n ? "am" : "pm",
                T: 12 > n ? "A" : "P",
                TT: 12 > n ? "AM" : "PM",
                Z: g ? "UTC" : (String(e).match(b) || [""]).pop().replace(c, ""),
                o: (r > 0 ? "-" : "+") + d(100 * Math.floor(Math.abs(r) / 60) + Math.abs(r) % 60, 4),
                S: ["th", "st", "nd", "rd"][j % 10 > 3 ? 0 : (j % 100 - j % 10 != 10) * j % 10]
            };
        return f.replace(a, function (a) {
            return a in s ? s[a] : a.slice(1, a.length - 1)
        })
    }
}();
dateFormat.masks = {
        "default": "ddd mmm dd yyyy HH:MM:ss",
        shortDate: "m/d/yy",
        mediumDate: "mmm d, yyyy",
        longDate: "mmmm d, yyyy",
        fullDate: "dddd, mmmm d, yyyy",
        shortTime: "h:MM TT",
        mediumTime: "h:MM:ss TT",
        longTime: "h:MM:ss TT Z",
        isoDate: "yyyy-mm-dd",
        isoTime: "HH:MM:ss",
        isoDateTime: "yyyy-mm-dd'T'HH:MM:ss",
        isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
    }, dateFormat.i18n = {
        dayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        monthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
    }, Date.prototype.format = function (a, b) {
        return dateFormat(this, a, b)
    },
    function (a) {
        a.widget("metro.carousel", {
            version: "1.0.0",
            options: {
                auto: !0,
                period: 2e3,
                duration: 500,
                effect: "slowdown",
                direction: "left",
                markers: {
                    show: !0,
                    type: "default",
                    position: "left"
                },
                controls: !0,
                stop: !0,
                width: "100%",
                height: 300
            },
            _slides: {},
            _currentIndex: 0,
            _interval: 0,
            _outPosition: 0,
            _create: function () {
                var a = this,
                    b = this.options,
                    c = carousel = this.element,
                    d = carousel.find(".controls");
                void 0 != c.data("auto") && (b.auto = c.data("auto")), void 0 != c.data("period") && (b.period = c.data("period")), void 0 != c.data("duration") && (b.duration = c.data("duration")), void 0 != c.data("effect") && (b.effect = c.data("effect")), void 0 != c.data("direction") && (b.direction = c.data("direction")), void 0 != c.data("width") && (b.width = c.data("width")), void 0 != c.data("height") && (b.height = c.data("height")), void 0 != c.data("stop") && (b.stop = c.data("stop")), void 0 != c.data("controls") && (b.controls = c.data("controls")), void 0 != c.data("markersShow") && (b.markers.show = c.data("markersShow")), void 0 != c.data("markersType") && (b.markers.type = c.data("markersType")), void 0 != c.data("markersPosition") && (b.markers.position = c.data("markersPosition")), carousel.css({
                    width: this.options.width,
                    height: this.options.height
                }), this._slides = carousel.find(".slide"), this._slides.length <= 1 || (this.options.markers !== !1 && this.options.markers.show && this._slides.length > 1 && this._markers(a), this.options.controls && this._slides.length > 1 ? (carousel.find(".controls.left").on("click", function () {
                    a._slideTo("prior")
                }), carousel.find(".controls.right").on("click", function () {
                    a._slideTo("next")
                })) : d.hide(), this.options.stop && carousel.on("mouseenter", function () {
                    clearInterval(a._interval)
                }).on("mouseleave", function () {
                    a.options.auto && (a._autoStart(), a.options.period)
                }), this.options.auto && this._autoStart())
            },
            _autoStart: function () {
                var a = this;
                this._interval = setInterval(function () {
                    a._slideTo("left" == a.options.direction ? "next" : "prior")
                }, this.options.period)
            },
            _slideTo: function (b) {
                var c, d = this._slides[this._currentIndex];
                switch (void 0 == b && (b = "next"), "prior" === b ? (this._currentIndex -= 1, this._currentIndex < 0 && (this._currentIndex = this._slides.length - 1), this._outPosition = this.element.width()) : "next" === b && (this._currentIndex += 1, this._currentIndex >= this._slides.length && (this._currentIndex = 0), this._outPosition = -this.element.width()), c = this._slides[this._currentIndex], this.options.effect) {
                    case "switch":
                        this._effectSwitch(d, c);
                        break;
                    case "slowdown":
                        this._effectSlowdown(d, c, this.options.duration);
                        break;
                    case "fade":
                        this._effectFade(d, c, this.options.duration);
                        break;
                    default:
                        this._effectSlide(d, c, this.options.duration)
                }
                var e = this.element,
                    f = this;
                e.find(".markers ul li a").each(function () {
                    var b = a(this).data("num");
                    b === f._currentIndex ? a(this).parent().addClass("active") : a(this).parent().removeClass("active")
                })
            },
            _slideToSlide: function (a) {
                var b = this._slides[this._currentIndex],
                    c = this._slides[a];
                switch (this._outPosition = a > this._currentIndex ? -this.element.width() : this.element.width(), this.options.effect) {
                    case "switch":
                        this._effectSwitch(b, c);
                        break;
                    case "slowdown":
                        this._effectSlowdown(b, c, this.options.duration);
                        break;
                    case "fade":
                        this._effectFade(b, c, this.options.duration);
                        break;
                    default:
                        this._effectSlide(b, c, this.options.duration)
                }
                this._currentIndex = a
            },
            _markers: function (b) {
                var c, d, e, f;
                for (c = a('<div class="markers ' + this.options.markers.type + '" />'), d = a("<ul></ul>").appendTo(c), f = 0; f < this._slides.length; f++) e = a('<li><a href="javascript:void(0)" data-num="' + f + '"></a></li>'), 0 === f && e.addClass("active"), e.appendTo(d);
                switch (d.find("li a").removeClass("active").on("click", function () {
                    var c = a(this),
                        e = c.data("num");
                    return d.find("li").removeClass("active"), c.parent().addClass("active"), e == b._currentIndex ? !0 : (b._slideToSlide(e), !0)
                }), c.appendTo(this.element), this.options.markers.position) {
                    case "top-left":
                        c.css({
                            left: "10px",
                            right: "auto",
                            bottom: "auto",
                            top: "10px"
                        });
                        break;
                    case "top-right":
                        c.css({
                            left: "auto",
                            right: "10px",
                            bottom: "auto",
                            top: "0px"
                        });
                        break;
                    case "top-center":
                        c.css({
                            left: this.element.width() / 2 - c.width() / 2,
                            right: "auto",
                            bottom: "auto",
                            top: "0px"
                        });
                        break;
                    case "bottom-left":
                        c.css({
                            left: "10px",
                            right: "auto"
                        });
                        break;
                    case "bottom-right":
                        c.css({
                            right: "10px",
                            left: "auto"
                        });
                        break;
                    case "bottom-center":
                        c.css({
                            left: this.element.width() / 2 - c.width() / 2,
                            right: "auto"
                        })
                }
            },
            _effectSwitch: function (b, c) {
                a(b).hide(), a(c).css({
                    left: 0
                }).show()
            },
            _effectSlide: function (b, c, d) {
                a(b).animate({
                    left: this._outPosition
                }, d), a(c).css("left", -1 * this._outPosition).show().animate({
                    left: 0
                }, d)
            },
            _effectSlowdown: function (b, c, d) {
                var e = {
                    duration: d,
                    easing: "doubleSqrt"
                };
                a.easing.doubleSqrt = function (a) {
                    return Math.sqrt(Math.sqrt(a))
                }, a(b).animate({
                    left: this._outPosition
                }, e), a(c).css("left", -1 * this._outPosition).show().animate({
                    left: 0
                }, e)
            },
            _effectFade: function (b, c, d) {
                a(b).fadeOut(d), a(c).css({
                    left: 0
                }).fadeIn(d)
            },
            _destroy: function () {},
            _setOption: function (a, b) {
                this._super("_setOption", a, b)
            }
        })
    }(jQuery),
    function (a) {
        a.widget("metro.tablecontrol", {
            version: "1.0.0",
            options: {
                width: "100%",
                height: "auto",
                cls: "table",
                checkRow: !1,
                colModel: [],
                data: []
            },
            _create: function () {
                var a, b = this.element;
                b.css({
                    width: this.options.width,
                    height: this.options.height
                }), a = this.createTable(b), this.addHeader(a, this.options.colModel), this.addTableData(a, this.options.data), a.addClass(this.options.cls)
            },
            addHeader: function (b, c) {
                var d, e = a("<thead/>").appendTo(b),
                    f = a("<tr/>").appendTo(e);
                a.each(c, function (b, c) {
                    d = a("<th/>").addClass(c.hcls).html(c.caption).appendTo(f)
                })
            },
            createTable: function (b) {
                return a("<table/>").appendTo(b)
            },
            addTableData: function (b, c) {
                var d = this,
                    e = a("<tbody/>").appendTo(b);
                a.each(c, function (a, b) {
                    d.addRowData(e, b)
                })
            },
            addRowData: function (b, c) {
                var d, e = a("<tr/>").appendTo(b);
                void 0 != c.__row_class && e.addClass(c.__row_class), a.each(this.options.colModel, function (b, f) {
                    d = a("<td/>").css("width", f.width).addClass(f.cls).html(c[f.field]).appendTo(e)
                })
            },
            _destroy: function () {},
            _setOption: function (a, b) {
                this._super("_setOption", a, b)
            }
        })
    }(jQuery), $(function () {
        $("[data-role=table]").tablecontrol()
    }),
    function (a) {
        a.Dialog = function (b) {
            if (a.Dialog.opened) return METRO_DIALOG;
            a.Dialog.opened = !0, a.Dialog.settings = b, b = a.extend({
                icon: !1,
                title: "",
                content: "",
                flat: !1,
                shadow: !1,
                overlay: !1,
                width: "auto",
                height: "auto",
                position: "default",
                padding: !1,
                overlayClickClose: !0,
                sysButtons: {
                    btnClose: !0
                },
                onShow: function () {},
                sysBtnCloseClick: function () {},
                sysBtnMinClick: function () {},
                sysBtnMaxClick: function () {}
            }, b);
            var c, d, e, f;
            return c = a("<div/>").addClass("metro window-overlay"), b.overlay && c.css({
                backgroundColor: "rgba(0,0,0,.7)"
            }), d = a("<div/>").addClass("window"), b.flat && d.addClass("flat"), b.shadow && d.addClass("shadow").css("overflow", "hidden"), e = a("<div/>").addClass("caption"), f = a("<div/>").addClass("content"), f.css({
                paddingTop: 32 + b.padding,
                paddingLeft: b.padding,
                paddingRight: b.padding,
                paddingBottom: b.padding
            }), b.sysButtons && (b.sysButtons.btnClose && a("<button/>").addClass("btn-close").on("click", function (c) {
                c.preventDefault(), c.stopPropagation(), a.Dialog.close(), b.sysBtnCloseClick(c)
            }).appendTo(e), b.sysButtons.btnMax && a("<button/>").addClass("btn-max").on("click", function (a) {
                a.preventDefault(), a.stopPropagation(), b.sysBtnMaxClick(a)
            }).appendTo(e), b.sysButtons.btnMin && a("<button/>").addClass("btn-min").on("click", function (a) {
                a.preventDefault(), a.stopPropagation(), b.sysBtnMinClick(a)
            }).appendTo(e)), b.icon && a(b.icon).addClass("icon").appendTo(e), a("<div/>").addClass("title").html(b.title).appendTo(e), f.html(b.content), e.appendTo(d), f.appendTo(d), d.appendTo(c), "auto" != b.width && d.css("min-width", b.width), "auto" != b.height && d.css("min-height", b.height), c.hide().appendTo("body").fadeIn("fast"), METRO_DIALOG = d, d.css("position", "fixed").css("z-index", parseInt(c.css("z-index")) + 1).css("top", (a(window).height() - METRO_DIALOG.outerHeight()) / 2).css("left", (a(window).width() - d.outerWidth()) / 2), addTouchEvents(d[0]), b.draggable && e.on("mousedown", function (b) {
                a.Dialog.drag = !0, e.css("cursor", "move");
                var c = (d.css("z-index"), d.outerHeight()),
                    f = d.outerWidth(),
                    g = d.offset().top + c - b.pageY,
                    h = d.offset().left + f - b.pageX;
                d.css("z-index", 99999).parents().on("mousemove", function (b) {
                    var e = b.pageY > 0 ? b.pageY + g - c : 0,
                        i = b.pageX > 0 ? b.pageX + h - f : 0;
                    a.Dialog.drag && (e >= 0 && e <= window.innerHeight - d.outerHeight() && d.offset({
                        top: e
                    }), i >= 0 && i <= window.innerWidth - d.outerWidth() && d.offset({
                        left: i
                    }))
                }), b.preventDefault()
            }).on("mouseup", function () {
                d.removeClass("draggable"), a.Dialog.drag = !1, e.css("cursor", "default")
            }), d.on("click", function (a) {
                a.stopPropagation()
            }), b.overlayClickClose && c.on("click", function (b) {
                b.preventDefault(), a.Dialog.close()
            }), b.onShow(METRO_DIALOG), a.Dialog.autoResize(), METRO_DIALOG
        }, a.Dialog.content = function (b) {
            return a.Dialog.opened && void 0 != METRO_DIALOG ? b ? (METRO_DIALOG.children(".content").html(b), a.Dialog.autoResize(), !0) : METRO_DIALOG.children(".content").html() : !1
        }, a.Dialog.title = function (b) {
            if (!a.Dialog.opened || void 0 == METRO_DIALOG) return !1;
            var c = METRO_DIALOG.children(".caption").children(".title");
            return b ? c.html(b) : c.html(), !0
        }, a.Dialog.autoResize = function () {
            if (!a.Dialog.opened || void 0 == METRO_DIALOG) return !1;
            var b = METRO_DIALOG.children(".content"),
                c = (a(window).height() - METRO_DIALOG.outerHeight()) / 2,
                d = (a(window).width() - METRO_DIALOG.outerWidth()) / 2;
            return METRO_DIALOG.css({
                width: b.outerWidth(),
                height: b.outerHeight(),
                top: c,
                left: d
            }), !0
        }, a.Dialog.close = function () {
            if (!a.Dialog.opened || void 0 == METRO_DIALOG) return !1;
            a.Dialog.opened = !1;
            var b = METRO_DIALOG.parent(".window-overlay");
            return b.fadeOut(function () {
                a(this).remove()
            }), !1
        }
    }(jQuery),
    function (a) {
        var b = !1,
            c = [],
            d = {
                _container: null,
                _notify: null,
                _timer: null,
                options: {
                    icon: "",
                    caption: "",
                    content: "",
                    shadow: !0,
                    width: "auto",
                    height: "auto",
                    style: !1,
                    position: "right",
                    timeout: 3e3
                },
                init: function (b) {
                    return this.options = a.extend({}, this.options, b), this._build(), this
                },
                _build: function () {
                    this._container = b || a("<div/>").addClass("metro notify-container").appendTo("body"), b = this._container;
                    var d = this.options;
                    return "" == d.content || void 0 == d.content ? !1 : (this._notify = a("<div/>").addClass("notify"), d.shadow && this._notify.addClass("shadow"), d.style && void 0 != d.style.background && this._notify.css("background-color", d.style.background), d.style && void 0 != d.style.color && this._notify.css("color", d.style.color), "" != d.caption && void 0 != d.caption && a("<div/>").addClass("caption").html(d.caption).appendTo(this._notify), "" != d.content && void 0 != d.content && a("<div/>").addClass("content").html(d.content).appendTo(this._notify), "auto" != d.width && this._notify.css("min-width", d.width), "auto" != d.height && this._notify.css("min-height", d.height), this._notify.hide().appendTo(this._container).fadeIn("slow"), c.push(this._notify), void this.close(d.timeout))
                },
                close: function (a) {
                    if (this.clear(), a == parseInt(a)) {
                        var b = this;
                        return this._timer = setTimeout(function () {
                            b._timer = null, b._hide()
                        }, a), this
                    }
                    return void 0 == a ? this._hide() : this
                },
                clear: function () {
                    return null != this._timer ? (clearTimeout(this._timer), this._timer = null, this) : !1
                },
                _hide: function () {
                    return this.clear(), void 0 != this._notify ? (this._notify.hide("slow", function () {
                        a(this).remove(), c.splice(c.indexOf(this._notify), 1)
                    }), this) : !1
                },
                closeAll: function () {
                    return c.forEach(function (a) {
                        a.hide("slow", function () {
                            a.remove(), c.splice(c.indexOf(a), 1)
                        })
                    }), this
                }
            };
        a.Notify = function (a) {
            return Object.create(d).init(a)
        }, a.Notify.show = function (b, c) {
            return a.Notify({
                content: b,
                caption: c
            })
        }
    }(jQuery),
    function (a) {
        a.Metro.initAccordions = function (b) {
            void 0 != b ? a(b).find("[data-role=accordion]").accordion() : a("[data-role=accordion]").accordion()
        }, a.Metro.initButtonSets = function (b) {
            void 0 != b ? (a(b).find("[data-role=button-set]").buttonset(), a(b).find("[data-role=button-group]").buttongroup()) : (a("[data-role=button-set]").buttonset(), a("[data-role=button-group]").buttongroup())
        }, a.Metro.initCarousels = function (b) {
            void 0 != b ? a(b).find("[data-role=carousel]").carousel() : a("[data-role=carousel]").carousel()
        }, a.Metro.initAll = function (b) {
            a.Metro.initCarousels(b)
        }
    }(jQuery), $(function () {
        $.Metro.initAll()
    }), $(function () {
        if (METRO_AUTO_REINIT) {
            var a, b = $(".metro").html();
            setInterval(function () {
                a = $(".metro").html(), b !== a && (b = a, $.Metro.initAll())
            }, 500)
        }
    });